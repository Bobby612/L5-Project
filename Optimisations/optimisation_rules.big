## Optimisations expressed as graph rewriting rules

## # Common Node Elimination

react opt_common_node_elimination_add = 
    Node.(
        NodeType.Simple | 
        Body.Add |
        Read.(Dedge{x}.id | Dedge{y}.id) |
        Write.Dedge{z}.id |
        id
    ) | 
    Node.(
        NodeType.Simple |
        Body.Add |
        Read.(Dedge{x}.id | Dedge{y}.id) |
        Write.Dedge{w}.id |
        id
    ) 
    --> /u
    Node.(
        NodeType.Simple |
        Body.Add |
        Read.(Dedge{x}.id | Dedge{y}.id) |
        Write.Dedge{u}.id |
        Alias{z,w}.AliasNewName{u} |
        id
    ) 
    @[0, 1, 2, 3];

react opt_common_node_elimination_load = 
    Node.(
        NodeType.Simple |
        Body.Load |
        Read.Dedge{x}.id |
        Write.Dedge{z}.id |
        id
    ) |
    Node.(
        NodeType.Simple |
        Body.Load |
        Read.Dedge{x}.id |
        Write.Dedge{w} |
        id
    )
    --> /u
    Node.(
        NodeType.Simple |
        Body.Add |
        Read.Dedge{x}.id |
        Write.Dedge{u}.id |
        Alias{z,w}.AliasNewName{u} |
        id
    ) 
    @[0, 1, 2];

## # Node Pull In -- Gamma
fun react opt_node_pull_in(i) = /x /b (
    Node.(
        Read.id |
        Write.Dedge{x}.Loc{a}
    ) |
    Node.(
        NodeType.Gamma |
        Read.(Dedge{x}.Loc{b} | id) | 
        Import.(Dedge{y}.Loc{b} | id) |
        Body.(
            Region(i).(
                Node.(
                    Read.(Dedge{y}.Loc{c}) |
                    id
                ) |
                id
            ) |
            id
        )
    )
)
    --> 
    Node.(
        NodeType.Gamma |
        Read.(id | id) | 
        Import.(id | id) |
        Body.(
            Region(i).(
                Node.(
                    Read.id |
                    Write.Dedge{y}.Loc{a}
                ) |
                Node.(
                    Read.(Dedge{y}.Loc{c}) |
                    id
                ) |
                id
            ) |
            id
        )
    )
    @[0, 1, 0, 2, 0, 3, 4, 5]
    ;



## # Invariant Value Redirection -- Theta Node
react opt_invariant_value_redirect_theta_2_read = /a /b
    Node.(
        NodeType.Theta |
        Read.(Dedge{m}.Loc{a} | Dedge{n}.Loc{b} | id) |
        Import.(Dedge{x}.Loc{a} | Dedge{y}.Loc{b} | id) | 
        Body.Region(0).(
            Node.(
                Read.(Dedge{x}.id | Dedge{y}.id) |
                Write.Dedge{z}.id |
                id
            ) | 
            id
        ) |
        id
    )
    --> /o (
    Node.(
        Read.(Dedge{m}.id | Dedge{n}.id) |
        Write.Dedge{o}.id |
        id
    ) | /c /a /b
    Node.(
        NodeType.Theta |
        Read.(Dedge{m}.Loc{a} | Dedge{n}.Loc{b} | Dedge{o}.Loc{c} | id) |
        Import.(Dedge{x}.Loc{a} | Dedge{y}.Loc{b} | Dedge{z}.Loc{c} | id ) | 
        Body.Region(0).id |
        id
    )
)
    @[2, 3, 4, 5, 0, 1, 6, 7]
    ## if !({a} || {b}) in param
    ;

react opt_invariant_value_redirect_theta_1_read = /a
    Node.(
        NodeType.Theta |
        Read.(Dedge{m}.Loc{a} | id) |
        Import.(Dedge{x}.Loc{a} | id) | 
        Body.Region(0).(
            Node.(
                Read.Dedge{x}.id |
                Write.Dedge{z}.id |
                id
            ) | 
            id
        ) |
        id
    )
    --> /o (
    Node.(
        Read.Dedge{m}.id|
        Write.Dedge{o}.id |
        id
    ) | /c /a
    Node.(
        NodeType.Theta |
        Read.(Dedge{m}.Loc{a} | Dedge{o}.Loc{c} | id) |
        Import.(Dedge{x}.Loc{a} | Dedge{z}.Loc{c} | id ) | 
        Body.Region(0).id |
        id
    )
)
    @[2, 3, 4, 0, 1, 5, 6]
    ## if !Loc{a} in param
    ;

## react opt_ivr_mark_unsuitable = 
##     Node.(
##         NodeType.Theta |
##         Import.(Dedge{x}.Loc{a})
##         Body.Region(0).(
##             Node.(
##                 Read.(Dedge{x}.id | id) |
##                 Extra.id
##                 | id
##             ) |
##             id        
##         ) |
##         Export.(Dedge{y}.Loc{a} | id) |
##         id
##     )
##     -->
##     Node.(
##         NodeType.Theta |
##         Import.(Dedge{x}.Loc{a})
##         Body.Region(0).(
##             Node.(
##                 Read.(Dedge{x}.id | id) |
##                 Extra.(
##                     FlagIVR.Unsuitable |
##                     id
##                 )
##                 | id
##             ) |
##             id        
##         ) |
##         Export.(Dedge{y}.Loc{a} | id) |
##         id
##     )
##     ;

## react opt_ivr_mark_suitable = 
##     Node.(
##         Extra.id |
##         id
##     )
##     -->
##     Node.(
##         Extra.(
##             FlagIVR.Suitable |
##             id
##         ) |
##         id
##     )
##     if !FlagIVR in param
##     ;

## react opt_ivr = 
##     Node.(
##         NodeType.Theta |
##         Body.Region(0).(
##             Node.(
##                 Extra.(
##                     FlagIVR.Suitable |
##                     id
##                 ) |
##                 id
##             ) |
##             id        
##         ) |
##         id
##     )
##     -->
##     Node.(
##         Extra.id |
##         id
##     ) |
##     Node.(
##         NodeType.Theta |
##         Body.Region(0).id |
##         id
##     )
##     ;

## react opt_fix_ = 

    




## Some fix rules 
react opt_fix_remove_unused_import = /y /a
    Node.(
        Read.(Dedge{x}.Loc{a} | id) |
        Import.(Dedge{y}.Loc{a} | id) |
        id
    )
    -->
    Node.(
        Read.id |
        Import.id |
        id
    ) | {x}
    ;

fun react opt_fix_gamma_read(i) = 
    Node.(
        NodeType.Gamma |
        Read.(Dedge{x}.Loc{a} | id) |
        Import.(Dedge{x}.Loc{a} | id) |
        Body.(
            Region(i).(
                Node.(
                    Read.(Dedge{x}.Loc{a}  | id) |
                    id
                ) |
                id
            )
        ) |
        id
    )
    --> /b /y
    Node.(
        NodeType.Gamma |
        Read.(Dedge{x}.Loc{b} | id) |
        Import.(Dedge{y}.Loc{b} | id) |
        Body.(
            Region(i).(
                Node.(
                    Read.(Dedge{y}.Loc{a}  | id) |
                    id
                ) |
                id
            )
        ) |
        id
    )
    ;

react opt_deduplicate_import_read = /b (
    Read.(Dedge{z}.Loc{a} | Dedge{z}.Loc{b} | id) |
    Import.(Dedge{x}.Loc{a} | Dedge{y}.Loc{b} | id) 
)
    --> /u (
    Read.(Dedge{z}.Loc{a} | id) |
    Import.(Dedge{u}.Loc{a} | Alias{x,y}.AliasNewName{u}| id)
)
    ;


# ## ## Misc ## ## #
## Aliasing fixes
react aliasing_connect = 
    Alias{x,y}.AliasNewName{u} || 
    Dedge{x}.id
    -->
    Alias{x,y}.AliasNewName{u} ||
    Dedge{u}.id
    ;

react aliasing_finish = /x /y
    Alias{x,y}.AliasNewName{u}
    -->
    1 | {u}
    ;


